// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Temperature and Humidity data model
model Temperature {
  id          Int      @id @default(autoincrement())
  temperature Float
  humidity    Float
  timestamp   DateTime @default(now())
}

// Soil Moisture data model
model SoilMoistureData {
  id        Int      @id @default(autoincrement())
  moisture  Float
  timestamp DateTime @default(now())
}

// User model for authentication
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  isNfcEnable Boolean  @default(false)
  nfcNumber   String?  // Optional NFC card number
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


   //optional fields
   firstName   String?
   lastName    String?
   cr_number           String? @db.NVarChar(100)
  cr_activity         String? @db.NVarChar(Max)
  company_name_eng    String? @db.NVarChar(Max)
  company_name_arabic String? @db.NVarChar(Max)
  company_landline    String? @db.NVarChar(Max)
  business_type       String? @db.NVarChar(50) // organization, individual/family business
  zip_code            String? @db.VarChar(50)
  industry_types      String? @db.NVarChar(Max) // JSON string
  country             String? @db.NVarChar(100)
  state               String? @db.NVarChar(100)
  city                String? @db.NVarChar(100)
  membership_category String? @db.NVarChar(50)
  user_source         String? @default("fatsAi") @db.NVarChar(20) // gst, printpack
  tin_number          String? @db.NVarChar(100)
  image               String?
  gps_location String? @db.NVarChar(Max)
  latitude     String?
  longitude    String?
  
  // Additional user profile fields
  phoneNo             String? @db.NVarChar(20)
  dateOfBirth         DateTime?
  gender              String? @db.NVarChar(10)
  displayName         String? @db.NVarChar(100)
  bio                 String? @db.NVarChar(Max)
  language            String? @db.NVarChar(10)
  emailNotification   Boolean @default(true)
  smsAlert            Boolean @default(false)
  pushNotification    Boolean @default(true)
  buildingNumber      String? @db.NVarChar(50)
  companySize         String? @db.NVarChar(50)
  website             String? @db.NVarChar(Max)
  bAddress            String? @db.NVarChar(Max)
  bBuildingNumber     String? @db.NVarChar(50)
  bCountry            String? @db.NVarChar(100)
  bState              String? @db.NVarChar(100)
  bCity               String? @db.NVarChar(100)
  bZipCode            String? @db.VarChar(50)
  vatNumber           String? @db.NVarChar(100)
  commercialRegistration String? @db.NVarChar(100)

  // Relations
  user_subscriptions UserSubscription[]
  documents_owned    MemberDocument[]   @relation("DocumentOwner")
  documents_uploaded MemberDocument[]   @relation("UploadedByMember")
  manageLocations    ManageLocation[]
  maintenances       Maintenance[]
  
  @@map("users")
}

// Admin model for admin authentication
model Admin {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  member_documents MemberDocument[] @relation("UploadedByAdmin")
  
  @@map("admins")
}

// Fuel Level data model
model FuelLevel {
  id        Int      @id @default(autoincrement())
  level     Float    // Current fuel level (percentage or volume)
  capacity  Float    // Total fuel capacity
  timestamp DateTime @default(now())
}

// Vibration Sensor data model
model VibrationSensor {
  id             Int      @id @default(autoincrement())
  amplitude      Float    // Vibration amplitude (in mm/s or g)
  frequency      Float    // Vibration frequency (in Hz)
  axisX          Float    // X-axis vibration value
  axisY          Float    // Y-axis vibration value
  axisZ          Float    // Z-axis vibration value
  rms            Float    // Root Mean Square value of vibration
  peakValue      Float    // Peak vibration value
  deviceId       String   // Identifier for the vibration sensor device
  timestamp      DateTime @default(now())
}

// Employee List model
model EmployeeList {
  id           Int      @id @default(autoincrement())
  employeeName String
  jobType      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  transferAssets TransferAsset[] // One-to-many relationship with TransferAsset
}

// Asset model
model Asset {
  id             Int          @id @default(autoincrement())
  name           String
  tagNumber      String       @unique
  model          String
  brand          String
  serialNumber   String?
  assetCondition String       // e.g., "Good", "Fair", "Poor"
  assetStatus    String       // e.g., "In Use", "In Storage", "Under Maintenance"
  description    String
  assetDescription String?
  image          String?      // Path to the image file
  price          Float?       // Price of the asset
  modifiers      String?      // Additional modifiers or specifications
  manufactureDate DateTime?   // Date of manufacture
  expiryDate     DateTime?    // Expiry or warranty end date
  status         Int          @default(0)

  

  // Relations
  categoryId     Int
  category       Category     @relation(fields: [categoryId], references: [id])
  
  subCategoryId  Int
  subCategory    SubCategory  @relation(fields: [subCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  locationId     Int
  location       Location     @relation(fields: [locationId], references: [id])
  locationCode   String
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Category model
model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  subCategories SubCategory[] // One-to-many relationship with SubCategory
  assets       Asset[]       // One-to-many relationship with Asset
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// SubCategory model
model SubCategory {
  id          Int       @id @default(autoincrement())
  name        String    
  description String?
  categoryId  Int       // Foreign key to Category
  category    Category  @relation(fields: [categoryId], references: [id])
  assets      Asset[]   // One-to-many relationship with Asset
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, categoryId]) // Ensure subcategory names are unique within a category
}

// Location model
model Location {
  id           Int       @id @default(autoincrement())
  company      String
  building     String
  level_floor  String
  office       String
  room         String
  locationCode String    @unique
  assets       Asset[]   // One-to-many relationship with Asset
  manageLocations ManageLocation[] // One-to-many relationship with ManageLocation
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// MegaMenu model
model MegaMenu {
  id          Int           @id @default(autoincrement())
  name_en     String
  name_ar     String
  status      Boolean       @default(true)
  subMenus    SubMegaMenu[] // One-to-many relationship with SubMegaMenu
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// SubMegaMenu model
model SubMegaMenu {
  id          Int       @id @default(autoincrement())
  name_en     String
  name_ar     String
  image       String?   // Path to the image file
  caption     String?
  caption_ar  String?
  status      Boolean   @default(true)
  url         String
  megamenu_id Int       // Foreign key to MegaMenu
  megaMenu    MegaMenu  @relation(fields: [megamenu_id], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Brand model
model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// AssetCondition model
model AssetCondition {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Department model
model Department {
  id              Int       @id @default(autoincrement())
  departmentCode  String    @unique
  departmentName  String    
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// NPK Sensor data model
model NPKSensor {
  id          Int      @id @default(autoincrement())
  nitrogen    Float    // Nitrogen level (in mg/kg or ppm)
  phosphorus  Float    // Phosphorus level (in mg/kg or ppm)
  potassium   Float    // Potassium level (in mg/kg or ppm)
  ph          Float    // pH level of the soil (0-14 scale)
  deviceId    String   // Identifier for the NPK sensor device
  timestamp   DateTime @default(now())
}

// DeviceCategory model
model DeviceCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  image       String?    // Path to the image file
  button      String?    // Button text or action
  iotDevices  IotDevice[] // One-to-many relationship with IotDevice
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// IotDevice model
model IotDevice {
  id              Int            @id @default(autoincrement())
  name            String
  tagNumber       String         @unique
  model           String
  serialNumber    String?
  image           String?        // Path to the image file
  price           Float?         // Price of the device
  modifiers       String?        // Additional modifiers or specifications
  manufactureDate DateTime?      // Date of manufacture
  expiryDate      DateTime?      // Expiry or warranty end date
  status          Int            @default(0)
  
  // Relations
  deviceCategoryId Int
  deviceCategory   DeviceCategory @relation(fields: [deviceCategoryId], references: [id])
  
  iotDeviceAssets  IotDeviceAsset[] // One-to-many relationship with IotDeviceAsset
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
model Service {
  id           String   @id @default(cuid())
  name         String   @unique 
  display_name String   
  description  String?  
  service_type String   @default("feature") 
  icon         String?  
  is_active    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  // Relations
  plan_services PlanService[]

  @@map("services")
}
// Many-to-Many relationship between Plans and Services
model PlanService {
  id          String   @id @default(cuid())
  planId      String   @map("plan_id")
  serviceId   String   @map("service_id")
  isIncluded  Boolean  @default(true) @map("is_included")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  plan    SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  service Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([planId, serviceId])
  @@map("plan_services")
}

model SubscriptionPlan {
  id            String   @id @default(cuid())
  name          String   @unique @db.NVarChar(100) // "free_services", "standard", "professional", "enterprise"
  displayName   String   @map("display_name") @db.NVarChar(150)
  description   String?  @db.NVarChar(500)
  price         Decimal  @db.Decimal(10, 2)
  billingCycle  String   @default("yearly") @map("billing_cycle") @db.NVarChar(20)
  isPopular     Boolean  @default(false) @map("is_popular")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  plan_services      PlanService[]
  user_subscriptions UserSubscription[]

  @@map("subscription_plans")
}
model UserSubscription {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  planId              String    @map("plan_id")
  status              String    @default("active") @db.NVarChar(20)
  startedAt           DateTime  @default(now()) @map("started_at")
  expiresAt           DateTime? @map("expires_at")
  paymentStatus       String    @default("pending") @map("payment_status") @db.NVarChar(20)
  amountPaid          Decimal?  @map("amount_paid") @db.Decimal(10, 2)
  paymentMethod       String?   @map("payment_method") @db.NVarChar(50)
  transactionId       String?   @map("transaction_id") @db.NVarChar(100)
  cancelledAt         DateTime? @map("cancelled_at")
  cancellationReason  String?   @map("cancellation_reason") @db.NVarChar(500)
  notes               String?   @db.NVarChar(Max) // optional additional info
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("user_subscriptions")
}
model MemberDocument {
  id                   String   @id @default(cuid())
  documentPath         String   @db.NVarChar(Max)
  transactionId        String   @default("0") @map("transaction_id") @db.NVarChar(255)
  userId               String   @map("user_id")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  docType              String   @map("doc_type") @db.NVarChar(50)
  status               String?  @default("active") @db.VarChar(20)

  deletedAt            DateTime? @map("deleted_at")

  uploadedByAdminId    String?  @map("uploaded_by_admin_id") // optional FK
  uploadedByMemberId   String?  @map("uploaded_by_member_id") // optional FK

  // Relations
  user   User    @relation("DocumentOwner", fields: [userId], references: [id], onDelete: Cascade)
  admin  Admin?  @relation("UploadedByAdmin", fields: [uploadedByAdminId], references: [id], onDelete: SetNull)
  member User?   @relation("UploadedByMember", fields: [uploadedByMemberId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("member_documents")
}

model Template {
  id             String    @id @default(cuid())
  name           String    @db.NVarChar(Max)
  name_ar        String    @db.NVarChar(Max)
  description    String?   @db.NVarChar(Max)
  description_ar String?   @db.NVarChar(Max)
  created_at     DateTime  @default(now()) @db.DateTime
  updated_at     DateTime  @default(now()) @db.DateTime
  pages          NewPage[]
}

model NewPage {
  id                 String    @id @default(cuid())
  name               String?   @db.NVarChar(Max)
  name_ar            String?   @db.NVarChar(Max)
  slug               String?   @unique
  seo_description    String?   @db.NVarChar(Max)
  seo_description_ar String?   @db.NVarChar(Max)
  status             Int?
  template_id        String
  created_at         DateTime? @default(now()) @db.DateTime
  updated_at         DateTime? @default(now()) @db.DateTime
  template           Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  sections           Section[]
}

model Section {
  id         String    @id @default(cuid())
  page_id    String
  name       String    @db.NVarChar(Max)
  name_ar    String    @db.NVarChar(Max)
  order      Int
  created_at DateTime  @default(now()) @db.DateTime
  updated_at DateTime  @default(now()) @db.DateTime
  contents   Content[]
  page       NewPage   @relation(fields: [page_id], references: [id], onDelete: Cascade)
}

model Content {
  id         String   @id @default(cuid())
  section_id String
  type       String   @db.NVarChar(Max)
  data       String   @db.NVarChar(Max)
  created_at DateTime @default(now()) @db.DateTime
  updated_at DateTime @default(now()) @db.DateTime
  data_ar    String?  @db.NVarChar(Max)
  section    Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)
}
model rainStatus{
 id        Int @id @default(autoincrement())
 status    Float 
 createdAt DateTime @default(now()) @map("created_at")
 updatedAt DateTime @default(now()) @map("updated_at")
}

model motionDetection{
 id        Int @id @default(autoincrement())
 status    String 
 createdAt DateTime @default(now()) @map("created_at")
 updatedAt DateTime @default(now()) @map("updated_at")
}
model vibrationDetection{
 id        Int @id @default(autoincrement())
 status    String 
 createdAt DateTime @default(now()) @map("created_at")
 updatedAt DateTime @default(now()) @map("updated_at")
}
model gasDetection{
 id        Int @id @default(autoincrement())
 status    Float 
 createdAt DateTime @default(now()) @map("created_at")
 updatedAt DateTime @default(now()) @map("updated_at")
}
model ultrasonic{
 id        Int @id @default(autoincrement())
 status    Float 
 createdAt DateTime @default(now()) @map("created_at")
 updatedAt DateTime @default(now()) @map("updated_at")
}
model carDetection{
 id        Int @id @default(autoincrement())
 distance  Float
 status    String 
 createdAt DateTime @default(now()) @map("created_at")
 updatedAt DateTime @default(now()) @map("updated_at")
}

model FirstContainer {
  id              Int      @id @default(autoincrement())
  name            String
  name_ar         String
  description     String?
  description_ar  String?
  image           String?  // Path to the image file
  status          Boolean  @default(true)
  url             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SecondContainer {
  id              Int      @id @default(autoincrement())
  name            String
  name_ar         String
  description     String?
  description_ar  String?
  image           String?  // Path to the image file
  status          Boolean  @default(true)
  url             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ThirdContainer {
  id              Int      @id @default(autoincrement())
  name            String
  name_ar         String
  description     String?
  description_ar  String?
  image           String?  // Path to the image file
  status          Boolean  @default(true)
  url             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FourthContainer {
  id              Int      @id @default(autoincrement())
  name            String
  name_ar         String
  description     String?
  description_ar  String?
  image           String?  // Path to the image file
  status          Boolean  @default(true)
  url             String?
  points          String   // Stored as JSON string of array
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Comment {
  id              Int      @id @default(autoincrement())
  name            String
  title           String
  title_ar        String
  description     String?
  description_ar  String?
  image           String?  // Path to the image file
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DemoRequest {
  id              Int      @id @default(autoincrement())
  email           String
  phoneNumber     String
  companyName     String
  message         String?
  status          String   @default("pending") // pending, contacted, completed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Header {
  id              Int      @id @default(autoincrement())
  name            String
  name_ar         String
  url             String
  status          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Languages {
  id              Int      @id @default(autoincrement())
  key             String   @unique
  value           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FAQ {
  id              Int      @id @default(autoincrement())
  name            String
  name_ar         String?
  content         String   @db.NVarChar(Max)
  content_ar      String?  @db.NVarChar(Max)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AssetType {
  id        Int      @id @default(autoincrement())
  name_en   String
  name_ar   String
  status    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  iotDeviceAssets IotDeviceAsset[] // One-to-many relationship with IotDeviceAsset
}

model IotDeviceAsset {
  id          Int      @id @default(autoincrement())
  assetName   String
  assetType   String
  location    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  iotDeviceId   Int
  iotDevice     IotDevice @relation(fields: [iotDeviceId], references: [id], onDelete: Cascade)
  
  assetTypeId   Int
  assetTypeRef  AssetType @relation(fields: [assetTypeId], references: [id], onDelete: Cascade)
  
  transferAssets TransferAsset[] // One-to-many relationship with TransferAsset
  maintenances   Maintenance[] // One-to-many relationship with Maintenance
}

model TransferAsset {
  id              Int      @id @default(autoincrement())
  location        String
  note            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  iotDeviceAssetId Int
  iotDeviceAsset   IotDeviceAsset @relation(fields: [iotDeviceAssetId], references: [id], onDelete: Cascade)
  
  employeeId       Int
  employee         EmployeeList @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Technician {
  id        Int      @id @default(autoincrement())
  name_en   String
  name_ar   String
  status    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  maintenances Maintenance[] // One-to-many relationship with Maintenance
}

model Maintenance {
  id              Int      @id @default(autoincrement())
  maintenanceType String
  scheduleDate    DateTime
  note            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  iotDeviceAssetId Int
  iotDeviceAsset   IotDeviceAsset @relation(fields: [iotDeviceAssetId], references: [id], onDelete: Cascade)
  
  technicianId     Int
  technician       Technician @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ManageLocation model
model ManageLocation {
  id           Int      @id @default(autoincrement())
  locationName String
  address      String
  capacity     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  locationTypeId Int
  location      Location @relation(fields: [locationTypeId], references: [id], onDelete: Cascade)
  
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}