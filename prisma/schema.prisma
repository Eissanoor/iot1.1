// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Temperature and Humidity data model
model Temperature {
  id          Int      @id @default(autoincrement())
  temperature Float
  humidity    Float
  timestamp   DateTime @default(now())
}

// Soil Moisture data model
model SoilMoistureData {
  id        Int      @id @default(autoincrement())
  moisture  Float
  timestamp DateTime @default(now())
}

// User model for authentication
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  username    String   @unique
  password    String
  isNfcEnable Boolean  @default(false)
  nfcNumber   String?  // Optional NFC card number
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Fuel Level data model
model FuelLevel {
  id        Int      @id @default(autoincrement())
  level     Float    // Current fuel level (percentage or volume)
  capacity  Float    // Total fuel capacity
  timestamp DateTime @default(now())
}

// Vibration Sensor data model
model VibrationSensor {
  id             Int      @id @default(autoincrement())
  amplitude      Float    // Vibration amplitude (in mm/s or g)
  frequency      Float    // Vibration frequency (in Hz)
  axisX          Float    // X-axis vibration value
  axisY          Float    // Y-axis vibration value
  axisZ          Float    // Z-axis vibration value
  rms            Float    // Root Mean Square value of vibration
  peakValue      Float    // Peak vibration value
  deviceId       String   // Identifier for the vibration sensor device
  timestamp      DateTime @default(now())
}

// Asset model
model Asset {
  id             Int          @id @default(autoincrement())
  name           String
  tagNumber      String       @unique
  model          String
  brand          String
  serialNumber   String?
  assetCondition String       // e.g., "Good", "Fair", "Poor"
  assetStatus    String       // e.g., "In Use", "In Storage", "Under Maintenance"
  description    String
  assetDescription String?
  image          String?      // Path to the image file
  
  // Relations
  categoryId     Int
  category       Category     @relation(fields: [categoryId], references: [id])
  
  subCategoryId  Int
  subCategory    SubCategory  @relation(fields: [subCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  locationId     Int
  location       Location     @relation(fields: [locationId], references: [id])
  locationCode   String
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Category model
model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  subCategories SubCategory[] // One-to-many relationship with SubCategory
  assets       Asset[]       // One-to-many relationship with Asset
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// SubCategory model
model SubCategory {
  id          Int       @id @default(autoincrement())
  name        String    
  description String?
  categoryId  Int       // Foreign key to Category
  category    Category  @relation(fields: [categoryId], references: [id])
  assets      Asset[]   // One-to-many relationship with Asset
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, categoryId]) // Ensure subcategory names are unique within a category
}

// Location model
model Location {
  id           Int       @id @default(autoincrement())
  company      String
  building     String
  level_floor  String
  office       String
  room         String
  locationCode String    @unique
  assets       Asset[]   // One-to-many relationship with Asset
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
